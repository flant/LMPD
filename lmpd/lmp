#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#       Main process (connection manager) for LMPD (http://flant.ru/projects/lmpd)
#       server.py
#       
#       Copyright (C) 2009-2012 CJSC Flant (www.flant.ru)
#       Written by Nikolay "GyRT" Bogdanov <nikolay.bogdanov@flant.ru>
#       
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.

import os, sys, signal, site, optparse, traceback, logging, threading

# Importing our modules
site.addsitedir("/usr/lib/lmpd/lib", known_paths=None)
site.addsitedir("/usr/lib/lmpd/plugins", known_paths=None)
import Config, Init, Connection, Policy, Worker, PySQLPool, Reloader


def main():
	parser = optparse.OptionParser(description='SMTP policy whitelisting daemon.')
	parser.add_option('-c', '--config', help='Path to the config file', default='/etc/postfix/lmpd.yaml')
	parser.add_option('-p', '--pid', help='Path to the PID file', default='/tmp/lmpd.pid')
	parser.add_option('-d', dest='is_daemon', action='store_true', help='Become a daemon', default=False)
	(args, options) = parser.parse_args()	

	Init.check_clone(args.pid)

	# reading config
	config = Config.Config(args.config)

	# get workers limits
	limit = int(config.get('limit', Init.limits()))
	softlimit = int(config.get('softlimit', 10))

	# getting debug options
	debug = config.get('debug', False)
	log = config.get('log', False)
	try:
		loglevel = getattr(logging, config.get('loglevel', 'NOTSET').upper())
	except:
		loglevel = logging.INFO
	if log:
		logging.basicConfig(filename=log, level=loglevel, datefmt='%m/%d/%Y %I:%M:%S %p', format='%(asctime)s %(levelname)s - %(message)s\n')
	else:
		logging.basicConfig(level=loglevel, datefmt='%m/%d/%Y %I:%M:%S %p', format='%(asctime)s %(levelname)s - %(message)s\n')
	# set uid and gid
	Init.baseinit(config)
	
	# creating socket
	socket = Init.createsock(config)
	
	# creating mysql pool
	mysql_config = config.get("mysql", False)
	if mysql_config:
		PySQLPool.getNewPool().maxActiveConnections = config.get("mysql_pool", 10)
		sql_pool = PySQLPool.getNewConnection(username=config.get("mysql_user", "root"), password=config.get("mysql_password", ""), host=config.get("mysql_host", "localhost"), db=config.get("mysql_dbname", "postfix"), port=config.get("mysql_port", 3306))
	else:	
		logging.error("Lost fields in the mysql config. Exiting...")
		sys.exit(1)

	# loading filters names from config
	flt_names = config.get("filters_order", False)
	if not flt_names:
		flt_names = ["AddressPolicy","DomainPolicy","UserPolicy"]

	# loading filters
	flts = []
	for flt_name in flt_names:
		try:
			globals()[flt_name] = locals()[flt_name] = __import__(flt_name, globals(), locals(), [], -1)
			flt = getattr(locals()[flt_name], flt_name)(config, sql_pool, debug)
		except:
			logging.warning("Error while loading module. Traceback:\n{0}".format(traceback.format_exc()))
			continue
		flts.append(flt)

	# Loading default answer for postfix
	default_answer = config.get("filters_default", False)
	if not default_answer:
		logging.info("Lost fields in the filter config. Exiting...")
		sys.exit(1)

	signal.signal(signal.SIGTERM, lambda x, y: Init.SIGINT_handler(args.pid, socket, sql_pool, x, y))
	signal.signal(signal.SIGINT, lambda x, y: Init.SIGINT_handler(args.pid, socket, sql_pool, x, y))
	signal.signal(signal.SIGHUP, signal.SIG_IGN)

	if args.is_daemon:
		Init.demonize()

	# Writing pid to file
	Init.write_pid(args.pid)

	reload_proc = Reloader.ReloaderTread(int(config.get("filters_reload", 600)), flts, debug)
	try:
		reload_proc.start()
	except:
		logging.error("Spawned threads : %s. Can't spawn another one" % threading.active_count())
		sys.exit(1)

	while 1:
		conn, addr = socket.accept()
		proc = Worker.WorkerTread(conn, flts, default_answer, sql_pool, debug)
		if threading.active_count() <= (limit + softlimit):
			if threading.active_count() > limit:
				logging.warning("Process limit reached.")
			try:
				proc.start()
			except(thread.error):
				logging.error("Spawned threads : %s. Can't spawn another one" % threading.active_count())
				sys.exit(1)


if __name__ == "__main__":
	main()
